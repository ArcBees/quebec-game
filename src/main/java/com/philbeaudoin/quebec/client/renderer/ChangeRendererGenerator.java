package com.philbeaudoin.quebec.client.renderer;

import javax.inject.Inject;

import com.philbeaudoin.quebec.shared.AcceptGameStateChange;
import com.philbeaudoin.quebec.shared.GameStateChange;
import com.philbeaudoin.quebec.shared.GameStateChangeComposite;
import com.philbeaudoin.quebec.shared.GameStateChangeMoveCubes;
import com.philbeaudoin.quebec.shared.GameStateChangeVisitor;

/**
 * Use this class to generate the {@link ChangeRenderer} corresponding to a given
 * {@link GameStateChange}.
 * @author Philippe Beaudoin <philippe.beaudoin@gmail.com>
 */
public class ChangeRendererGenerator implements GameStateChangeVisitor {

  private final RendererFactories rendererFactory;
  private ChangeRenderer changeRenderer;

  @Inject
  public ChangeRendererGenerator(RendererFactories rendererFactory) {
    this.rendererFactory = rendererFactory;
  }

  /**
   * Returns the {@link ChangeRenderer} generated by this factory.
   * @return The change renderer generated by this factory, or {@code null} if the factory has not
   *     visited anything yet.
   */
  public ChangeRenderer getChangeRenderer() {
    return changeRenderer;
  }

  @Override
  public void visit(GameStateChangeComposite host) {
    final ChangeRendererComposite result = rendererFactory.createChangeRendererComposite();

    host.callOnEach(new AcceptGameStateChange() {
      @Override
      public void execute(GameStateChange gameStateChange) {
        ChangeRendererGenerator generator = rendererFactory.createChangeRendererGenerator();
        gameStateChange.accept(generator);
        result.add(generator.getChangeRenderer());
      }});

    changeRenderer = result;
  }

  @Override
  public void visit(GameStateChangeMoveCubes host) {
    SceneCubeDestinationGenerator generatorFrom =
        rendererFactory.createSceneGraphCubeDestinationGenerator();
    host.getFrom().accept(generatorFrom);
    SceneCubeDestinationGenerator generatorTo =
        rendererFactory.createSceneGraphCubeDestinationGenerator();
    host.getTo().accept(generatorTo);
    changeRenderer = rendererFactory.createChangeRendererMoveCubes(host.getNbCubes(), 
        generatorFrom.getSceneCubeDestination(),
        generatorTo.getSceneCubeDestination());
  }
}
