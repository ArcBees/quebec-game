/**
 * Copyright 2011 Philippe Beaudoin
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.philbeaudoin.quebec.client.renderer;

import javax.inject.Inject;

import com.philbeaudoin.quebec.shared.statechange.ArchitectDestinationPlayer;
import com.philbeaudoin.quebec.shared.statechange.ArchitectDestinationTile;
import com.philbeaudoin.quebec.shared.statechange.ArchitectDestinationVisitor;

/**
 * Use this class to generate the {@link SceneArchitectDestination} corresponding to a given
 * {@link com.philbeaudoin.quebec.shared.statechange.ArchitectDestination ArchitectDestination}.
 * @author Philippe Beaudoin <philippe.beaudoin@gmail.com>
 */
public class SceneArchitectDestinationGenerator implements ArchitectDestinationVisitor {

  private final RendererFactories rendererFactory;
  private SceneArchitectDestination sceneArchitectDestination;

  @Inject
  public SceneArchitectDestinationGenerator(RendererFactories rendererFactory) {
    this.rendererFactory = rendererFactory;
  }

  /**
   * Returns the {@link SceneArchitectDestination} generated by this factory.
   * @return The scene architect destination generated by this factory, or {@code null} if the
   *     factory has not visited anything yet.
   */
  public SceneArchitectDestination getSceneArchitectDestination() {
    return sceneArchitectDestination;
  }

  @Override
  public void visit(ArchitectDestinationTile host) {
    sceneArchitectDestination = rendererFactory.createSceneArchitectDestinationTile(host);
  }

  @Override
  public void visit(ArchitectDestinationPlayer host) {
    sceneArchitectDestination = rendererFactory.createSceneArchitectDestinationPlayer(host);
  }
}
